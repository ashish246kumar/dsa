Longest-substring-without-repeating-characters

*********
class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> h=new HashSet<>();
        int left=0,right=0,n=s.length()-1,maxlen=0;
        while(right<=n){
            char c=s.charAt(right);
            if(h.contains(c)){
                while(h.contains(s.charAt(right))){
                    h.remove(s.charAt(left));
                    left++;
                }
              h.add(c);
             
               
                
            }
           else{
             h.add(c);
              maxlen=Math.max(h.size(),maxlen);
                
           }
            right++;
            
        }
        return maxlen;

    }
*********


******************************************
max-consecutive-ones-iii
**********

class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        n=len(nums)
        left=0
        right=0
        zero=0
        maxlen=0
        while(right<n):
            if nums[right]==0:
                zero+=1
            while(zero>k):
                if nums[left]==0:
                    zero-=1
                left+=1    

            maxlen=max(maxlen,right-left+1)  
            right+=1  
          
        return maxlen          
**********************************************************
Find length of the longest subarray containing atmost two distinct integers
************

ass Solution {
    public static int totalElements(Integer[] arr) {
        // code here
        HashMap<Integer,Integer> h=new HashMap<>();
        
        int left=0,right=0,n=arr.length,maxlen=0;
        while(left<=right){
            h.put(arr[right],h.getOrDefault(arr[right],0)+1);
            while(h.size()>2){
                h.put(arr[left],h.get(arr[left])-1);
                if(h.get(arr[left])==0){
                    h.remove(arr[left]);
                }
                left++;
            }
            maxlen=Math.max(maxlen,right-left+1);
            right++;
        }
        return maxlen;
        
    }
}

or
from collections import defaultdict

class Solution:
    def totalElements(self,arr):
        dict1=defaultdict(int)
        
        left=0
        right=0
        maxlen=0
        n=len(arr)
        while right<n:
            dict1[arr[right]]+=1
            while len(dict1)>2:
                dict1[arr[left]]-=1
                if dict1[arr[left]]==0:
                    del dict1[arr[left]]
                
                left+=1
            maxlen=max(maxlen,right-left+1) 
            right+=1
        return maxlen    
        # Code here
*********





        
