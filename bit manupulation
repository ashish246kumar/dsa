K-th Bit is Set or Not


class CheckBit {
    // Function to check if Kth bit is set or not.
    static boolean checkKthBit(int n, int k) {
        // Your code here
        return (n&(1<<k))!=0;
    }
}
***********************************
to find the rightmost bit of n do
n&1
*****
to shift the right most bit
n>>k
**********************************************************************************************************************
minimum-flips-to-make-a-or-b-equal-to-c
*********************
class Solution {
    public int minFlips(int a, int b, int c) {
        int flip=0;
        while(a!=0 || b!=0 || c!=0){
            if((c&1)==1){
                if((a&1)==0 && (b&1)==0){
                    flip++;
                }
               
            }
            else if ((c&1)==0){
                if((a&1)==1){
                    flip++;
                }
                if((b&1)==1){
                    flip++;
                }
            }
            a=a>>1;
            b=b>>1;
            c=c>>1;
        }
        return flip;
    }
}
****************************************************
Given a 32 bit unsigned integer num and an integer i. Perform following operations on the number - 

1. Get ith bit

2. Set ith bit

3. Clear ith bit
********
class Solution {
    static void bitManipulation(int num, int i) {
        // code here
        int a=(num & (1<<(i-1)))!=0?1:0;
        int b=(num | (1<<(i-1)));
        int c=(num & (~(1<<(i-1))));
        System.out.println(a+" "+b+" "+c);
    }
}
*************************************************************************
Power of two or not
class Solution {
    public boolean isPowerOfTwo(int n) {
        return n>0 && (n & (n-1))==0;
    }
}
*******************

