K-th Bit is Set or Not


class CheckBit {
    // Function to check if Kth bit is set or not.
    static boolean checkKthBit(int n, int k) {
        // Your code here
        return (n&(1<<k))!=0;
    }
}
***********************************
Set the rightmost unset bit

class Solution {
    static int setBit(int n) {
        // code here
        return (n|(n+1));
    }
}
***************************
if n&1==0 then even number and if n&1=1 then it is odd.
*******************************************************
to find the rightmost bit of n do
n&1
*****
to shift the right most bit
n>>k
**********************************************************************************************************************
minimum-flips-to-make-a-or-b-equal-to-c
*********************
class Solution {
    public int minFlips(int a, int b, int c) {
        int flip=0;
        while(a!=0 || b!=0 || c!=0){
            if((c&1)==1){
                if((a&1)==0 && (b&1)==0){
                    flip++;
                }
               
            }
            else if ((c&1)==0){
                if((a&1)==1){
                    flip++;
                }
                if((b&1)==1){
                    flip++;
                }
            }
            a=a>>1;
            b=b>>1;
            c=c>>1;
        }
        return flip;
    }
}
****************************************************
Given a 32 bit unsigned integer num and an integer i. Perform following operations on the number - 

1. Get ith bit

2. Set ith bit

3. Clear ith bit
********
class Solution {
    static void bitManipulation(int num, int i) {
        // code here
        int a=(num & (1<<(i-1)))!=0?1:0;
        int b=(num | (1<<(i-1)));
        int c=(num & (~(1<<(i-1))));
        System.out.println(a+" "+b+" "+c);
    }
}
*************************************************************************
Power of two or not
class Solution {
    public boolean isPowerOfTwo(int n) {
        return n>0 && (n & (n-1))==0;
    }
}
*******************
single-number-ii
******************************************************
{2,2,2,9,4,4,4}

0, 0, 1, 0 <-2
0, 0, 1, 0 <-2
0, 0, 1, 0 <-2
1, 0, 0, 1 <-9
0, 1, 0, 0 <-4
0, 1, 0, 0 <-4
0, 1, 0, 0 <-4


for 0th bit'
0 come 6 time  and 1 come 1 time
it means the ans jo hume ans milega uska 0th bit 1  raha hoga.

since hume pata hai jo result hoga 0th bit 1 hoga toh hum 0th bit 1 or operation ke through kar denge
0 0 0 0
0 0 0 1   or
*********
0 0 0 1
********
for 1 st bit
1  come three time and 0 come 4 times
it means 1 three times usi ka aya hoga jo number three times hoga  toh hum ise consider nhi karenge
ab zero 4 bar hai  4%3=1 iska matlab jo result hoga uska 1st bit 0 hoga
********
for 2nd bit
 1  come three time and 0 come 4 times
it means 1 three times usi ka aya hoga jo number three times hoga  toh hum ise consider nhi karenge
ab zero 4 bar hai  4%3=1 iska matlab jo result hoga uska 1st bit 0 hoga
*****************
for 3rd bit 
0 come 6 times and 1 one time
and 6%3=0 so ise hum consider nhi karenge
1%3=1
iska mtlab 3 bit 1 hoga
toh 1 ka 3 times left shit niklege aur result ke sath 'or' operation  kar dunga
0 0 0 1
1 0 0 0 -> or
********
1 0 0 1  ->9
******
***************************************************************************
class Solution {
    public int singleNumber(int[] nums) {
        int result=0;
        for(int k=0;k<32;k++){
            int temp=1<<k;
            int countone=0,countzero=0;
            for(int num : nums){
                if((num & temp)==0){
                    countzero++;
                }
                else{
                    countone++;
                }
            }
            if(countone%3==1){
                result=(result | temp);
            }
        }
        return result;
    }
}
***********************************************************************************************************************************************************
counting bits
*********************************************************************************************************************************************************
class Solution {
    public int[] countBits(int n) {
        int [] ans=new int[n+1];
        if(n==0){
            return ans;
        }

        
        ans[1]=1;
        for(int i=2;i<=n;i++){
           if(i%2==0){
            ans[i]=ans[i/2];
           }
           else{
                ans[i]=ans[i/2]+1;
           }
        }
        return ans;
    }
}
*********************************************
0, 0, 0, 0 <-0 
0, 0, 0, 1 <-1
0, 0, 1, 0 <-2 
0, 0, 1, 1 <-3 
0, 1, 0, 0 <-4 -
0, 1, 0, 1 <-5
0, 1, 1, 0 <-6
0, 1, 1, 1 <-7
1, 0, 0, 0 <-8
*******************************************************************************************************************************************
x ^ y same number ke saath dobara XOR karne pe wapas x milta hai
swap two number
************
class Solution{
    static List<Integer> get(int a,int b)
    {
        a=a^b;
        b=a^b;
        a=a^b;
        // code here
        List<Integer> l1=new ArrayList<Integer>();
        
        
       l1.add(a);

        l1.add(b);
        return l1;
    }
}
**************************************

find-the-original-array-of-prefix-xor
*******************
class Solution {
    public int[] findArray(int[] pref) {
        int n=pref.length;
        int[]ans=new int[n];
        ans[0]=pref[0];
        for(int i=1;i<n;i++){
            ans[i]=pref[i-1]^pref[i];
        }
        return ans;
    }
}

*****************
pref[0]={a0}
pref[1]={a0,a1}
pref[2]={a0,a1,a2}
pref[3]={a0,a1,a2,a3}
pref[4]={a0,a1,a2,a3,a4}=pref[3]^pref[4]
***************************************************************
sort-integers-by-the-number-of-1-bits
************
class Solution {
    public int[] sortByBits(int[] arr) {
        Integer[] boxedArray=Arrays.stream(arr).boxed().toArray(Integer[]::new);
      
        Arrays.sort(boxedArray,
            (a,b)->{
                int countof1bitOfA=Integer.bitCount(a);
                  int countof1bitOfB=Integer.bitCount(b);
                  if(countof1bitOfA==countof1bitOfB){
                     return a.compareTo(b);
                  }
                  return Integer.compare(countof1bitOfA,countof1bitOfB);
            }
        );
        int[] c=Arrays.stream(boxedArray).mapToInt(Integer::intValue).toArray();
      
        return c;
    }
}
 
**********
Left shift (<<): Number ko 2 se multiply karta hai (jaise 3 << 1 = 6).
Right shift (>>): Number ko 2 se divide karta hai (jaise 6 >> 1 = 3).
************************************
divide-two-integers
**************
class Solution {
    public int divide(int dividend, int divisor) {
        int sign=-1,result=0;
        int MAX_INT = Integer.MAX_VALUE;
        int MIN_INT = Integer.MIN_VALUE;

        if(dividend==MIN_INT && divisor ==-1){
            return MAX_INT;
        }
        if(dividend>0 && divisor>0 || dividend<0  && divisor<0){
            sign=1;
        }
        long dvd = Math.abs((long) dividend);
        long dvs = Math.abs((long) divisor);

        // Quotient ko 0 se start karo
        int quotient = 0;

        // Loop jab tak dividend divisor se bada hai
        while (dvd >= dvs) {
            long currDivisor = dvs;  // Har baar original divisor se start
            long multiple = 1;       // Multiple bhi reset

            // Divisor ko shift karo jab tak dividend se chhota hai
            while (dvd >= (currDivisor << 1)) {
                currDivisor <<= 1;
                multiple <<= 1;
            }

            // Subtract karo aur quotient update karo
            dvd -= currDivisor;
            quotient += multiple;
        }

        // Sign apply karo
        return sign * quotient;
      
       
    }
}
****************************************************************************************
class Solution {
      public static int findXOR(int l, int r) {
          return findXOR1(l-1)^findXOR1(r);
      }
    public static int findXOR1(int n) {
       if(n%4==0){
           return n;
       }
       else if(n%4==3){
           return 0;
       }
       else if(n%4==2){
           return n+1;
       }
       else{
           return 1;
       }
       
    }
}
XOR(L to R) = XOR(1 to R) ⊕ XOR(1 to L-1)
Let's say L=4 and R=8
XOR(1 to 8) = 1 ⊕ 2 ⊕ 3 ⊕ 4 ⊕ 5 ⊕ 6 ⊕ 7 ⊕ 8
XOR(1 to 3) = 1 ⊕ 2 ⊕ 3
When we XOR these:
(1 ⊕ 2 ⊕ 3 ⊕ 4 ⊕ 5 ⊕ 6 ⊕ 7 ⊕ 8) ⊕ (1 ⊕ 2 ⊕ 3)
= (1 ⊕ 1) ⊕ (2 ⊕ 2) ⊕ (3 ⊕ 3) ⊕ 4 ⊕ 5 ⊕ 6 ⊕ 7 ⊕ 8
= 0 ⊕ 0 ⊕ 0 ⊕ 4 ⊕ 5 ⊕ 6 ⊕ 7 ⊕ 8
= 4 ⊕ 5 ⊕ 6 ⊕ 7 ⊕ 8
************************************************************

