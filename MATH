plus one
class Solution {
    public int[] plusOne(int[] digits) {
       int n = digits.length;
        
        for (int i = n - 1; i >= 0; i--) {
            if (digits[i] < 9) {
                digits[i]++;
                return digits;
            }
            digits[i] = 0;  // If digit is 9, set it to 0 and continue to the next digit.
        }
        
        // If all digits were 9, we need an extra digit at the beginning.
        int[] result = new int[n + 1];
        result[0] = 1;  // Example: [9,9,9] -> [1,0,0,0]
        return result;
    }
}
*************
ugly-number

class Solution {
    public boolean isUgly(int n) {
      if(n<=0){
        return false;
      }
      while(n%2==0){
        n=n/2;
      }
     while(n%3==0){
        n=n/3;
      }
      while(n%5==0){
        n=n/5;
      }
      return n==1;

    }
}
************
missing number
*******************
class Solution {
    public int missingNumber(int[] nums) {
         int n=nums.length;
        int totalSum=(n*(n+1))/2,sum=0;
        for(int i=0;i<nums.length;i++){
             sum+=nums[i];
        }
        return (totalSum-sum);
    }
}
*********
Nim gAME
**********
class Solution {
    public boolean canWinNim(int n) {
        return n%4!=0;
    }
}
**********************************
